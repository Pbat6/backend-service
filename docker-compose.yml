services:
  postgres:
    image: postgres:15
    container_name: postgres
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports: # Không public database
      - '5432:5432'
    networks:
      - backend

  redis:
    image: redis:6.2-alpine
    container_name: redis
    hostname: redis
    ports: # Không public cache
      - '6379:6379'
    env_file:
      - .env
    environment:
      - ALLOW_EMPTY_PASSWORD=no
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DISABLE_COMMANDS=FLUSHDB;FLUSHALL
    networks:
      - backend

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports: # Không public Zookeeper
      - '22181:2181'
    networks:
      - backend

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports: # Không public Kafka
      - '29092:29092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # Đã đơn giản hóa listeners, chỉ cần nội bộ
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - backend

  backend-service:
    container_name: backend-service
    build:
      context: ./
      dockerfile: Dockerfile
    env_file:
      - .env
#    ports: # Nginx sẽ quản lý
#      - '8080:8080'
    networks:
      - backend
    depends_on:
      - postgres
      - redis
      - kafka

  elastic-search:
    image: elasticsearch:7.14.1
    container_name: elasticsearch
    restart: always
    ports: # Không public Elastic
      - "9200:9200"
    volumes: # Để lưu dữ liệu Elastic
      - esdata:/usr/share/elasticsearch/data
    environment:
      - discovery.type=single-node
    networks:
      - backend

  kibana:
    image: kibana:7.14.1
    container_name: kibana
    restart: always
    ports: # Nginx sẽ quản lý
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elastic-search:9200
    networks:
      - backend
    depends_on:
      - elastic-search

  logstash:
    image: logstash:7.14.1
    container_name: logstash
    restart: always
    ports: # Dịch vụ nội bộ
      - "5600:5600"
      - "5044:5044"
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    environment:
      - XPACK_MONITORING_ELASTICSEARCH_HOSTS=http://elastic-search:9200
      - XPACK_MONITORING_ENABLED=true
    networks:
      - backend
    depends_on:
      - elastic-search

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports: # Grafana sẽ truy cập nội bộ
      - "9090:9090"
    networks:
      - backend

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    env_file:
      - .env
    environment: # account: admin/admin
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    ports: # Nginx sẽ quản lý
      - "3000:3000"
    links:
      - prometheus
    volumes:
      - grafana:/var/lib/grafana
    networks:
      - backend

  nginx-proxy:
    image: nginx:latest
    container_name: nginx-proxy
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "${NGINX_PUBLIC_PORT}:80" # CHỈ MỘT CỔNG NÀY ĐƯỢC PUBLIC
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - backend
    depends_on:
      - backend-service
      - grafana
      - kibana

networks:
  backend:
    driver: bridge

volumes:
  postgres:
  grafana:
  esdata: